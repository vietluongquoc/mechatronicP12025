CCS PCM C Compiler, Version 5.109, 43599               08-Thg6-25 19:54

               Filename:   C:\Users\minhn\OneDrive\Desktop\TRAN MINH NGHIA_2025223029\DO AN CDT_1.lst

               ROM used:   1020 words (12%)
                           Largest free fragment is 2048
               RAM used:   24 (7%) at main() level
                           35 (10%) worst case
               Stack used: 5 locations
               Stack size: 8

*
0000:  MOVLW  03
0001:  MOVWF  0A
0002:  GOTO   342
0003:  NOP
.................... #include <16f877a.h>
.................... //////////// Standard Header file for the PIC16F877A device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2020 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device PIC16F877A
0004:  DATA 4E,22
0005:  DATA 3A,00
0006:  DATA 43,10
0007:  DATA 00,01
0008:  DATA C4,20
0009:  DATA 3A,00
000A:  DATA 25,00
000B:  DATA C7,24
000C:  DATA CF,24
000D:  DATA 20,24
000E:  DATA 41,27
000F:  DATA 3A,00
0010:  DATA 43,10
0011:  DATA 00,00
*
0167:  MOVF   0B,W
0168:  MOVWF  2B
0169:  BCF    0B.7
016A:  BSF    03.5
016B:  BSF    03.6
016C:  BSF    0C.7
016D:  BSF    0C.0
016E:  NOP
016F:  NOP
0170:  BCF    03.5
0171:  BCF    03.6
0172:  BTFSC  2B.7
0173:  BSF    0B.7
0174:  BSF    03.6
0175:  MOVF   0C,W
0176:  ANDLW  7F
0177:  BTFSC  03.2
0178:  GOTO   1BB
0179:  BCF    03.6
017A:  MOVWF  2B
017B:  BSF    03.6
017C:  MOVF   0D,W
017D:  BCF    03.6
017E:  MOVWF  2C
017F:  BSF    03.6
0180:  MOVF   0F,W
0181:  BCF    03.6
0182:  MOVWF  2D
0183:  MOVF   2B,W
0184:  MOVWF  33
0185:  CALL   13B
0186:  MOVF   2C,W
0187:  BSF    03.6
0188:  MOVWF  0D
0189:  BCF    03.6
018A:  MOVF   2D,W
018B:  BSF    03.6
018C:  MOVWF  0F
018D:  BCF    03.6
018E:  MOVF   0B,W
018F:  MOVWF  2E
0190:  BCF    0B.7
0191:  BSF    03.5
0192:  BSF    03.6
0193:  BSF    0C.7
0194:  BSF    0C.0
0195:  NOP
0196:  NOP
0197:  BCF    03.5
0198:  BCF    03.6
0199:  BTFSC  2E.7
019A:  BSF    0B.7
019B:  BSF    03.6
019C:  RLF    0C,W
019D:  RLF    0E,W
019E:  ANDLW  7F
019F:  BTFSC  03.2
01A0:  GOTO   1BB
01A1:  BCF    03.6
01A2:  MOVWF  2B
01A3:  BSF    03.6
01A4:  MOVF   0D,W
01A5:  BCF    03.6
01A6:  MOVWF  2C
01A7:  BSF    03.6
01A8:  MOVF   0F,W
01A9:  BCF    03.6
01AA:  MOVWF  2D
01AB:  MOVF   2B,W
01AC:  MOVWF  33
01AD:  CALL   13B
01AE:  MOVF   2C,W
01AF:  BSF    03.6
01B0:  MOVWF  0D
01B1:  BCF    03.6
01B2:  MOVF   2D,W
01B3:  BSF    03.6
01B4:  MOVWF  0F
01B5:  INCF   0D,F
01B6:  BTFSC  03.2
01B7:  INCF   0F,F
01B8:  BCF    03.6
01B9:  GOTO   167
01BA:  BSF    03.6
01BB:  BCF    03.6
01BC:  RETURN
01BD:  MOVF   2C,W
01BE:  CLRF   78
01BF:  SUBWF  2B,W
01C0:  BTFSC  03.0
01C1:  GOTO   1C5
01C2:  MOVF   2B,W
01C3:  MOVWF  77
01C4:  GOTO   1D1
01C5:  CLRF   77
01C6:  MOVLW  08
01C7:  MOVWF  2D
01C8:  RLF    2B,F
01C9:  RLF    77,F
01CA:  MOVF   2C,W
01CB:  SUBWF  77,W
01CC:  BTFSC  03.0
01CD:  MOVWF  77
01CE:  RLF    78,F
01CF:  DECFSZ 2D,F
01D0:  GOTO   1C8
01D1:  RETURN
*
02F3:  BTFSC  03.1
02F4:  GOTO   2F8
02F5:  MOVLW  37
02F6:  MOVWF  04
02F7:  BCF    03.7
02F8:  CLRF   77
02F9:  CLRF   78
02FA:  CLRF   79
02FB:  CLRF   7A
02FC:  CLRF   37
02FD:  CLRF   38
02FE:  CLRF   39
02FF:  CLRF   3A
0300:  MOVF   36,W
0301:  IORWF  35,W
0302:  IORWF  34,W
0303:  IORWF  33,W
0304:  BTFSC  03.2
0305:  GOTO   336
0306:  MOVLW  20
0307:  MOVWF  3B
0308:  BCF    03.0
0309:  RLF    2F,F
030A:  RLF    30,F
030B:  RLF    31,F
030C:  RLF    32,F
030D:  RLF    37,F
030E:  RLF    38,F
030F:  RLF    39,F
0310:  RLF    3A,F
0311:  MOVF   36,W
0312:  SUBWF  3A,W
0313:  BTFSS  03.2
0314:  GOTO   31F
0315:  MOVF   35,W
0316:  SUBWF  39,W
0317:  BTFSS  03.2
0318:  GOTO   31F
0319:  MOVF   34,W
031A:  SUBWF  38,W
031B:  BTFSS  03.2
031C:  GOTO   31F
031D:  MOVF   33,W
031E:  SUBWF  37,W
031F:  BTFSS  03.0
0320:  GOTO   330
0321:  MOVF   33,W
0322:  SUBWF  37,F
0323:  MOVF   34,W
0324:  BTFSS  03.0
0325:  INCFSZ 34,W
0326:  SUBWF  38,F
0327:  MOVF   35,W
0328:  BTFSS  03.0
0329:  INCFSZ 35,W
032A:  SUBWF  39,F
032B:  MOVF   36,W
032C:  BTFSS  03.0
032D:  INCFSZ 36,W
032E:  SUBWF  3A,F
032F:  BSF    03.0
0330:  RLF    77,F
0331:  RLF    78,F
0332:  RLF    79,F
0333:  RLF    7A,F
0334:  DECFSZ 3B,F
0335:  GOTO   308
0336:  MOVF   37,W
0337:  MOVWF  00
0338:  INCF   04,F
0339:  MOVF   38,W
033A:  MOVWF  00
033B:  INCF   04,F
033C:  MOVF   39,W
033D:  MOVWF  00
033E:  INCF   04,F
033F:  MOVF   3A,W
0340:  MOVWF  00
0341:  RETURN
.................... 
.................... #list
.................... 
.................... #fuses      hs
.................... #use delay(clock=20M)
*
0012:  MOVLW  3B
0013:  MOVWF  04
0014:  BCF    03.7
0015:  MOVF   00,W
0016:  BTFSC  03.2
0017:  GOTO   025
0018:  MOVLW  06
0019:  MOVWF  78
001A:  CLRF   77
001B:  DECFSZ 77,F
001C:  GOTO   01B
001D:  DECFSZ 78,F
001E:  GOTO   01A
001F:  MOVLW  7B
0020:  MOVWF  77
0021:  DECFSZ 77,F
0022:  GOTO   021
0023:  DECFSZ 00,F
0024:  GOTO   018
0025:  RETURN
.................... 
.................... #define LCD_ENABLE_PIN PIN_B2
.................... #define LCD_RS_PIN PIN_B0
.................... #define LCD_RW_PIN PIN_B1
.................... 
.................... #define LCD_DATA4 PIN_B3
.................... #define LCD_DATA5 PIN_B4
.................... #define LCD_DATA6 PIN_B5
.................... #define LCD_DATA7 PIN_B6
.................... 
.................... #include <lcd.c>     
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ////                             LCD.C                                     ////
.................... ////                 Driver for common LCD modules                         ////
.................... ////                                                                       ////
.................... ////  lcd_init()   Must be called before any other function.               ////
.................... ////                                                                       ////
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         ////
.................... ////                 \a  Set cursor position to upper left                 ////
.................... ////                 \f  Clear display, set cursor to upper left           ////
.................... ////                 \n  Go to start of second line                        ////
.................... ////                 \b  Move back one position                            ////
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     ////
.................... ////              will erase all remanining characters on the current      ////
.................... ////              line, and move the cursor to the beginning of the next   ////
.................... ////              line.                                                    ////
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     ////
.................... ////              will move the cursor to the start of the current         ////
.................... ////              line.                                                    ////
.................... ////                                                                       ////
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        ////
.................... ////                                                                       ////
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             ////
.................... ////                                                                       ////
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         ////
.................... ////              (on=FALSE).                                              ////
.................... ////                                                                       ////
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   ////
.................... ////                                                                       ////
.................... ////                                                                       ////
.................... ////  CONFIGURATION                                                        ////
.................... ////  The LCD can be configured in one of two ways: a.) port access or     ////
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     ////
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     ////
.................... ////  connected to sequential pins on the GPIO.  Pin access                ////
.................... ////  has no requirements, all 7 bits of the control interface can         ////
.................... ////  can be connected to any GPIO using several ports.                    ////
.................... ////                                                                       ////
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     ////
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    ////
.................... ////  of this file to configure the pin order.  If you are using a         ////
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  ////
.................... ////  be defined.                                                          ////
.................... ////                                                                       ////
.................... ////  Example of port access:                                              ////
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         ////
.................... ////                                                                       ////
.................... ////  To use pin access, the following pins must be defined:               ////
.................... ////     LCD_ENABLE_PIN                                                    ////
.................... ////     LCD_RS_PIN                                                        ////
.................... ////     LCD_RW_PIN                                                        ////
.................... ////     LCD_DATA4                                                         ////
.................... ////     LCD_DATA5                                                         ////
.................... ////     LCD_DATA6                                                         ////
.................... ////     LCD_DATA7                                                         ////
.................... ////                                                                       ////
.................... ////  Example of pin access:                                               ////
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    ////
.................... ////     #define LCD_RS_PIN      PIN_E1                                    ////
.................... ////     #define LCD_RW_PIN      PIN_E2                                    ////
.................... ////     #define LCD_DATA4       PIN_D4                                    ////
.................... ////     #define LCD_DATA5       PIN_D5                                    ////
.................... ////     #define LCD_DATA6       PIN_D6                                    ////
.................... ////     #define LCD_DATA7       PIN_D7                                    ////
.................... ////                                                                       ////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... 
.................... #ifndef __LCD_C__
.................... #define __LCD_C__
.................... 
.................... // define the pinout.
.................... // only required if port access is being used.
.................... typedef struct  
.................... {                            // This structure is overlayed
....................    int1 enable;           // on to an I/O port to gain
....................    int1 rs;               // access to the LCD pins.
....................    int1 rw;               // The bits are allocated from
....................    int1 unused;           // low order up.  ENABLE will
....................    unsigned int     data : 4;         // be LSB pin of that port.
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT.
....................    unsigned int    reserved: 8;
....................   #endif
.................... } LCD_PIN_MAP;
.................... 
.................... // this is to improve compatability with previous LCD drivers that accepted
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B.
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE))
....................  #define LCD_DATA_PORT getenv("SFR:PORTB")
.................... #endif
.................... 
.................... #if defined(__PCB__)
....................    // these definitions only need to be modified for baseline PICs.
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions.
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0};
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF};
.................... #endif
.................... 
.................... ////////////////////// END CONFIGURATION ///////////////////////////////////
.................... 
.................... #ifndef LCD_ENABLE_PIN
....................    #define lcd_output_enable(x) lcdlat.enable=x
....................    #define lcd_enable_tris()   lcdtris.enable=0
.................... #else
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x)
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN)
.................... #endif
.................... 
.................... #ifndef LCD_RS_PIN
....................    #define lcd_output_rs(x) lcdlat.rs=x
....................    #define lcd_rs_tris()   lcdtris.rs=0
.................... #else
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x)
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN)
.................... #endif
.................... 
.................... #ifndef LCD_RW_PIN
....................    #define lcd_output_rw(x) lcdlat.rw=x
....................    #define lcd_rw_tris()   lcdtris.rw=0
.................... #else
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x)
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN)
.................... #endif
.................... 
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4,
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver
.................... // compatible with any code written for the original library
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7))
....................    #define  LCD_DATA4    LCD_DATA0
....................    #define  LCD_DATA5    LCD_DATA1
....................    #define  LCD_DATA6    LCD_DATA2
....................    #define  LCD_DATA7    LCD_DATA3
.................... #endif
.................... 
.................... #ifndef LCD_DATA4
.................... #ifndef LCD_DATA_PORT
....................    #if defined(__PCB__)
....................       #define LCD_DATA_PORT      0x06     //portb
....................       #define set_tris_lcd(x)   set_tris_b(x)
....................    #else
....................      #if defined(PIN_D0)
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd
....................      #else
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb
....................      #endif
....................    #endif   
.................... #endif
.................... 
.................... #if defined(__PCB__)
....................    LCD_PIN_MAP lcd, lcdlat;
....................    #byte lcd = LCD_DATA_PORT
....................    #byte lcdlat = LCD_DATA_PORT
.................... #elif defined(__PCM__)
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris;
....................    #byte lcd = LCD_DATA_PORT
....................    #byte lcdlat = LCD_DATA_PORT
....................    #byte lcdtris = LCD_DATA_PORT+0x80
.................... #elif defined(__PCH__)
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris;
....................    #byte lcd = LCD_DATA_PORT
....................    #byte lcdlat = LCD_DATA_PORT+9
....................    #byte lcdtris = LCD_DATA_PORT+0x12
.................... #elif defined(__PCD__)
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris;
....................    #word lcd = LCD_DATA_PORT
....................    #word lcdlat = LCD_DATA_PORT+2
....................    #word lcdtris = LCD_DATA_PORT-0x02
.................... #endif
.................... #endif   //LCD_DATA4 not defined
.................... 
.................... #ifndef LCD_TYPE
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines
.................... #endif
.................... 
.................... #ifndef LCD_LINE_TWO
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line
.................... #endif
.................... 
.................... #ifndef LCD_LINE_LENGTH
....................    #define LCD_LINE_LENGTH 20
.................... #endif
.................... 
.................... unsigned int8 lcd_read_nibble(void);
.................... 
.................... unsigned int8 lcd_read_byte(void)
.................... {
....................    unsigned int8 low,high;
.................... 
....................  #if defined(__PCB__)
....................    set_tris_lcd(LCD_INPUT_MAP);
....................  #else
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    output_float(LCD_DATA4);
*
008D:  BSF    06.3
....................    output_float(LCD_DATA5);
008E:  BSF    06.4
....................    output_float(LCD_DATA6);
008F:  BSF    06.5
....................    output_float(LCD_DATA7);
0090:  BSF    06.6
....................   #else
....................    lcdtris.data = 0xF;
....................   #endif
....................  #endif
....................         
....................    lcd_output_rw(1);
0091:  BCF    03.5
0092:  BSF    06.1
0093:  BSF    03.5
0094:  BCF    06.1
....................    delay_cycles(1);
0095:  NOP
....................    lcd_output_enable(1);
0096:  BCF    03.5
0097:  BSF    06.2
0098:  BSF    03.5
0099:  BCF    06.2
....................    delay_cycles(1);
009A:  NOP
....................    high = lcd_read_nibble();
009B:  BCF    03.5
009C:  CALL   054
009D:  MOVF   78,W
009E:  MOVWF  3B
....................       
....................    lcd_output_enable(0);
009F:  BCF    06.2
00A0:  BSF    03.5
00A1:  BCF    06.2
....................    delay_cycles(1);
00A2:  NOP
....................    lcd_output_enable(1);
00A3:  BCF    03.5
00A4:  BSF    06.2
00A5:  BSF    03.5
00A6:  BCF    06.2
....................    delay_us(1);
00A7:  GOTO   0A8
00A8:  GOTO   0A9
00A9:  NOP
....................    low = lcd_read_nibble();
00AA:  BCF    03.5
00AB:  CALL   054
00AC:  MOVF   78,W
00AD:  MOVWF  3A
....................       
....................    lcd_output_enable(0);
00AE:  BCF    06.2
00AF:  BSF    03.5
00B0:  BCF    06.2
.................... 
....................  #if defined(__PCB__)
....................    set_tris_lcd(LCD_OUTPUT_MAP);
....................  #else
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    output_drive(LCD_DATA4);
00B1:  BCF    06.3
....................    output_drive(LCD_DATA5);
00B2:  BCF    06.4
....................    output_drive(LCD_DATA6);
00B3:  BCF    06.5
....................    output_drive(LCD_DATA7);
00B4:  BCF    06.6
....................   #else
....................    lcdtris.data = 0x0;
....................   #endif
....................  #endif
.................... 
....................    return( (high<<4) | low);
00B5:  BCF    03.5
00B6:  SWAPF  3B,W
00B7:  MOVWF  77
00B8:  MOVLW  F0
00B9:  ANDWF  77,F
00BA:  MOVF   77,W
00BB:  IORWF  3A,W
00BC:  MOVWF  78
.................... }
.................... 
.................... unsigned int8 lcd_read_nibble(void)
.................... {
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
*
0054:  CLRF   3C
....................    unsigned int8 n = 0x00;
.................... 
....................    /* Read the data port */
....................    n |= input(LCD_DATA4);
0055:  BSF    03.5
0056:  BSF    06.3
0057:  MOVLW  00
0058:  BCF    03.5
0059:  BTFSC  06.3
005A:  MOVLW  01
005B:  IORWF  3C,F
....................    n |= input(LCD_DATA5) << 1;
005C:  BSF    03.5
005D:  BSF    06.4
005E:  MOVLW  00
005F:  BCF    03.5
0060:  BTFSC  06.4
0061:  MOVLW  01
0062:  MOVWF  77
0063:  BCF    03.0
0064:  RLF    77,F
0065:  MOVF   77,W
0066:  IORWF  3C,F
....................    n |= input(LCD_DATA6) << 2;
0067:  BSF    03.5
0068:  BSF    06.5
0069:  MOVLW  00
006A:  BCF    03.5
006B:  BTFSC  06.5
006C:  MOVLW  01
006D:  MOVWF  77
006E:  RLF    77,F
006F:  RLF    77,F
0070:  MOVLW  FC
0071:  ANDWF  77,F
0072:  MOVF   77,W
0073:  IORWF  3C,F
....................    n |= input(LCD_DATA7) << 3;
0074:  BSF    03.5
0075:  BSF    06.6
0076:  MOVLW  00
0077:  BCF    03.5
0078:  BTFSC  06.6
0079:  MOVLW  01
007A:  MOVWF  77
007B:  RLF    77,F
007C:  RLF    77,F
007D:  RLF    77,F
007E:  MOVLW  F8
007F:  ANDWF  77,F
0080:  MOVF   77,W
0081:  IORWF  3C,F
....................    
....................    return(n);
0082:  MOVF   3C,W
0083:  MOVWF  78
....................   #else
0084:  RETURN
....................    return(lcd.data);
....................   #endif
.................... }
.................... 
.................... void lcd_send_nibble(unsigned int8 n)
.................... {
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    /* Write to the data port */
....................    output_bit(LCD_DATA4, bit_test(n, 0));
*
0026:  BTFSC  3B.0
0027:  GOTO   02A
0028:  BCF    06.3
0029:  GOTO   02B
002A:  BSF    06.3
002B:  BSF    03.5
002C:  BCF    06.3
....................    output_bit(LCD_DATA5, bit_test(n, 1));
002D:  BCF    03.5
002E:  BTFSC  3B.1
002F:  GOTO   032
0030:  BCF    06.4
0031:  GOTO   033
0032:  BSF    06.4
0033:  BSF    03.5
0034:  BCF    06.4
....................    output_bit(LCD_DATA6, bit_test(n, 2));
0035:  BCF    03.5
0036:  BTFSC  3B.2
0037:  GOTO   03A
0038:  BCF    06.5
0039:  GOTO   03B
003A:  BSF    06.5
003B:  BSF    03.5
003C:  BCF    06.5
....................    output_bit(LCD_DATA7, bit_test(n, 3));
003D:  BCF    03.5
003E:  BTFSC  3B.3
003F:  GOTO   042
0040:  BCF    06.6
0041:  GOTO   043
0042:  BSF    06.6
0043:  BSF    03.5
0044:  BCF    06.6
....................   #else      
....................    lcdlat.data = n;
....................   #endif
....................       
....................    delay_cycles(1);
0045:  NOP
....................    lcd_output_enable(1);
0046:  BCF    03.5
0047:  BSF    06.2
0048:  BSF    03.5
0049:  BCF    06.2
....................    delay_us(2);
004A:  MOVLW  03
004B:  MOVWF  77
004C:  DECFSZ 77,F
004D:  GOTO   04C
....................    lcd_output_enable(0);
004E:  BCF    03.5
004F:  BCF    06.2
0050:  BSF    03.5
0051:  BCF    06.2
0052:  BCF    03.5
0053:  RETURN
.................... }
.................... 
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n)
.................... {
....................   #if defined(__PCB__)
....................    set_tris_lcd(LCD_OUTPUT_MAP);
....................   #else
....................    lcd_enable_tris();
*
0085:  BSF    03.5
0086:  BCF    06.2
....................    lcd_rs_tris();
0087:  BCF    06.0
....................    lcd_rw_tris();
0088:  BCF    06.1
....................   #endif
.................... 
....................    lcd_output_rs(0);
0089:  BCF    03.5
008A:  BCF    06.0
008B:  BSF    03.5
008C:  BCF    06.0
....................    while ( bit_test(lcd_read_byte(),7) ) ;
*
00BD:  MOVF   78,W
00BE:  MOVWF  3A
00BF:  BTFSS  3A.7
00C0:  GOTO   0C3
00C1:  BSF    03.5
00C2:  GOTO   08D
....................    lcd_output_rs(address);
00C3:  MOVF   38,F
00C4:  BTFSS  03.2
00C5:  GOTO   0C8
00C6:  BCF    06.0
00C7:  GOTO   0C9
00C8:  BSF    06.0
00C9:  BSF    03.5
00CA:  BCF    06.0
....................    delay_cycles(1);
00CB:  NOP
....................    lcd_output_rw(0);
00CC:  BCF    03.5
00CD:  BCF    06.1
00CE:  BSF    03.5
00CF:  BCF    06.1
....................    delay_cycles(1);
00D0:  NOP
....................    lcd_output_enable(0);
00D1:  BCF    03.5
00D2:  BCF    06.2
00D3:  BSF    03.5
00D4:  BCF    06.2
....................    lcd_send_nibble(n >> 4);
00D5:  BCF    03.5
00D6:  SWAPF  39,W
00D7:  MOVWF  3A
00D8:  MOVLW  0F
00D9:  ANDWF  3A,F
00DA:  MOVF   3A,W
00DB:  MOVWF  3B
00DC:  CALL   026
....................    lcd_send_nibble(n & 0xf);
00DD:  MOVF   39,W
00DE:  ANDLW  0F
00DF:  MOVWF  3A
00E0:  MOVWF  3B
00E1:  CALL   026
00E2:  RETURN
.................... }
.................... 
.................... #if defined(LCD_EXTENDED_NEWLINE)
.................... unsigned int8 g_LcdX, g_LcdY;
.................... #endif
.................... 
.................... void lcd_init(void) 
.................... {
....................    unsigned int8 i;
....................    unsigned int8 LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6};
00E3:  MOVLW  28
00E4:  MOVWF  2C
00E5:  MOVLW  0C
00E6:  MOVWF  2D
00E7:  MOVLW  01
00E8:  MOVWF  2E
00E9:  MOVLW  06
00EA:  MOVWF  2F
....................                              // These bytes need to be sent to the LCD
....................                              // to start it up.
....................    
.................... 
....................    lcd_output_enable(0);
00EB:  BCF    06.2
00EC:  BSF    03.5
00ED:  BCF    06.2
....................    lcd_output_rs(0);
00EE:  BCF    03.5
00EF:  BCF    06.0
00F0:  BSF    03.5
00F1:  BCF    06.0
....................    lcd_output_rw(0);
00F2:  BCF    03.5
00F3:  BCF    06.1
00F4:  BSF    03.5
00F5:  BCF    06.1
.................... 
....................  #if defined(__PCB__)
....................    set_tris_lcd(LCD_OUTPUT_MAP);
....................  #else
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    output_drive(LCD_DATA4);
00F6:  BCF    06.3
....................    output_drive(LCD_DATA5);
00F7:  BCF    06.4
....................    output_drive(LCD_DATA6);
00F8:  BCF    06.5
....................    output_drive(LCD_DATA7);
00F9:  BCF    06.6
....................   #else
....................    lcdtris.data = 0x0;
....................   #endif
....................    lcd_enable_tris();
00FA:  BCF    06.2
....................    lcd_rs_tris();
00FB:  BCF    06.0
....................    lcd_rw_tris();
00FC:  BCF    06.1
....................  #endif
....................     
....................    delay_ms(15);
00FD:  MOVLW  0F
00FE:  BCF    03.5
00FF:  MOVWF  3B
0100:  CALL   012
....................    for(i=1;i<=3;++i)
0101:  MOVLW  01
0102:  MOVWF  2B
0103:  MOVF   2B,W
0104:  SUBLW  03
0105:  BTFSS  03.0
0106:  GOTO   10F
....................    {
....................        lcd_send_nibble(3);
0107:  MOVLW  03
0108:  MOVWF  3B
0109:  CALL   026
....................        delay_ms(5);
010A:  MOVLW  05
010B:  MOVWF  3B
010C:  CALL   012
010D:  INCF   2B,F
010E:  GOTO   103
....................    }
....................    
....................    lcd_send_nibble(2);
010F:  MOVLW  02
0110:  MOVWF  3B
0111:  CALL   026
....................    delay_ms(5);
0112:  MOVLW  05
0113:  MOVWF  3B
0114:  CALL   012
....................    for(i=0;i<=3;++i)
0115:  CLRF   2B
0116:  MOVF   2B,W
0117:  SUBLW  03
0118:  BTFSS  03.0
0119:  GOTO   126
....................       lcd_send_byte(0,LCD_INIT_STRING[i]);
011A:  MOVLW  2C
011B:  ADDWF  2B,W
011C:  MOVWF  04
011D:  BCF    03.7
011E:  MOVF   00,W
011F:  MOVWF  30
0120:  CLRF   38
0121:  MOVF   30,W
0122:  MOVWF  39
0123:  CALL   085
.................... 
....................   #if defined(LCD_EXTENDED_NEWLINE)
0124:  INCF   2B,F
0125:  GOTO   116
0126:  BCF    0A.3
0127:  BCF    0A.4
0128:  GOTO   358 (RETURN)
....................    g_LcdX = 0;
....................    g_LcdY = 0;
....................   #endif
.................... }
.................... 
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y)
.................... {
....................    unsigned int8 address;
....................    
....................    if(y!=1)
0129:  DECFSZ 35,W
012A:  GOTO   12C
012B:  GOTO   12F
....................       address=LCD_LINE_TWO;
012C:  MOVLW  40
012D:  MOVWF  36
012E:  GOTO   130
....................    else
....................       address=0;
012F:  CLRF   36
....................      
....................    address+=x-1;
0130:  MOVLW  01
0131:  SUBWF  34,W
0132:  ADDWF  36,F
....................    lcd_send_byte(0,0x80|address);
0133:  MOVF   36,W
0134:  IORLW  80
0135:  MOVWF  37
0136:  CLRF   38
0137:  MOVF   37,W
0138:  MOVWF  39
0139:  CALL   085
.................... 
....................   #if defined(LCD_EXTENDED_NEWLINE)
013A:  RETURN
....................    g_LcdX = x - 1;
....................    g_LcdY = y - 1;
....................   #endif
.................... }
.................... 
.................... void lcd_putc(char c)
.................... {
....................    switch (c)
013B:  MOVF   33,W
013C:  XORLW  07
013D:  BTFSC  03.2
013E:  GOTO   149
013F:  XORLW  0B
0140:  BTFSC  03.2
0141:  GOTO   14E
0142:  XORLW  06
0143:  BTFSC  03.2
0144:  GOTO   156
0145:  XORLW  02
0146:  BTFSC  03.2
0147:  GOTO   15C
0148:  GOTO   161
....................    {
....................       case '\a'   :  lcd_gotoxy(1,1);     break;
0149:  MOVLW  01
014A:  MOVWF  34
014B:  MOVWF  35
014C:  CALL   129
014D:  GOTO   166
.................... 
....................       case '\f'   :  lcd_send_byte(0,1);
014E:  CLRF   38
014F:  MOVLW  01
0150:  MOVWF  39
0151:  CALL   085
....................                      delay_ms(2);
0152:  MOVLW  02
0153:  MOVWF  3B
0154:  CALL   012
....................                     #if defined(LCD_EXTENDED_NEWLINE)
....................                      g_LcdX = 0;
....................                      g_LcdY = 0;
....................                     #endif
....................                      break;
0155:  GOTO   166
.................... 
....................      #if defined(LCD_EXTENDED_NEWLINE)
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break;
....................       case '\n'   :
....................          while (g_LcdX++ < LCD_LINE_LENGTH)
....................          {
....................             lcd_send_byte(1, ' ');
....................          }
....................          lcd_gotoxy(1, g_LcdY+2);
....................          break;
....................      #else
....................       case '\n'   : lcd_gotoxy(1,2);        break;
0156:  MOVLW  01
0157:  MOVWF  34
0158:  MOVLW  02
0159:  MOVWF  35
015A:  CALL   129
015B:  GOTO   166
....................      #endif
....................      
....................       case '\b'   : lcd_send_byte(0,0x10);  break;
015C:  CLRF   38
015D:  MOVLW  10
015E:  MOVWF  39
015F:  CALL   085
0160:  GOTO   166
....................      
....................      #if defined(LCD_EXTENDED_NEWLINE)
....................       default     : 
....................          if (g_LcdX < LCD_LINE_LENGTH)
....................          {
....................             lcd_send_byte(1, c);
....................             g_LcdX++;
....................          }
....................          break;
....................      #else
....................       default     : lcd_send_byte(1,c);     break;
0161:  MOVLW  01
0162:  MOVWF  38
0163:  MOVF   33,W
0164:  MOVWF  39
0165:  CALL   085
....................      #endif
....................    }
0166:  RETURN
.................... }
....................  
.................... char lcd_getc(unsigned int8 x, unsigned int8 y)
.................... {
....................    char value;
.................... 
....................    lcd_gotoxy(x,y);
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low
....................    lcd_output_rs(1);
....................    value = lcd_read_byte();
....................    lcd_output_rs(0);
....................    
....................    return(value);
.................... }
.................... 
.................... // write a custom character to the ram
.................... // which is 0-7 and specifies which character array we are modifying.
.................... // ptr points to an array of 8 bytes, where each byte is the next row of
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and
.................... //    usually you will want to leave this byte 0x00.
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr)
.................... {
....................    unsigned int i;
.................... 
....................    which <<= 3;
....................    which &= 0x38;
.................... 
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address
.................... 
....................    for(i=0; i<8; i++)
....................    {
....................       lcd_send_byte(1, *ptr++);
....................    }
....................   
....................    #if defined(LCD_EXTENDED_NEWLINE)
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address
....................    #endif
.................... }
.................... 
.................... void lcd_cursor_on(int1 on)
.................... {
....................    if (on)
....................    {
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON
....................    }
....................    else
....................    {
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF
....................    }
.................... }
.................... 
.................... #endif
.................... 
.................... 
.................... unsigned int8     nd,nd1,da,da1;
.................... 
.................... 
.................... #define     ld    pin_c2
.................... #define     lx    pin_c1
.................... #define     loa   pin_d2
.................... 
.................... #define     up    pin_e0
.................... #define     dw    pin_e1
.................... 
.................... 
.................... unsigned int32    gh;
.................... 
.................... #BIT  DHT_DATA_OUT =  0x07.0
.................... #BIT  DHT_DATA_IN  =  0x07.0
.................... #BIT  DHT_DDR_DATA =  0x87.0     // set tris cua port A
.................... 
.................... #define DHT_ER    0
.................... #define DHT_OK    1
.................... 
.................... #define DDROUT    0
.................... #define DDRIN     1
.................... 
.................... unsigned int8 DHT_GetTemHumi(unsigned int8 &tem1,&tem2,unsigned int8 &humi1,&humi2)
.................... {
....................    unsigned int8 buffer[5]={0,0,0,0,0};
*
01D2:  CLRF   2B
01D3:  CLRF   2C
01D4:  CLRF   2D
01D5:  CLRF   2E
01D6:  CLRF   2F
....................    unsigned int8 ii,i,checksum;
....................    
....................    DHT_DDR_DATA=DDROUT;   // set la cong ra, huong vao hay ra
01D7:  BSF    03.5
01D8:  BCF    07.0
....................    DHT_DATA_OUT=1;
01D9:  BCF    03.5
01DA:  BSF    07.0
....................    delay_us(60);
01DB:  MOVLW  63
01DC:  MOVWF  77
01DD:  DECFSZ 77,F
01DE:  GOTO   1DD
01DF:  GOTO   1E0
....................    DHT_DATA_OUT=0;
01E0:  BCF    07.0
....................    delay_ms(25); // it nhat 18ms
01E1:  MOVLW  19
01E2:  MOVWF  3B
01E3:  CALL   012
....................    DHT_DATA_OUT=1;    
01E4:  BSF    07.0
....................    DHT_DDR_DATA=DDRIN;//set la cong vao
01E5:  BSF    03.5
01E6:  BSF    07.0
....................    delay_us(60);
01E7:  MOVLW  63
01E8:  MOVWF  77
01E9:  DECFSZ 77,F
01EA:  GOTO   1E9
01EB:  GOTO   1EC
....................    if(DHT_DATA_IN)return DHT_ER ;
01EC:  BCF    03.5
01ED:  BTFSS  07.0
01EE:  GOTO   1F3
01EF:  MOVLW  00
01F0:  MOVWF  78
01F1:  GOTO   243
01F2:  GOTO   1F5
....................    else while(!(DHT_DATA_IN));   //Doi DaTa len 1
01F3:  BTFSS  07.0
01F4:  GOTO   1F3
....................    delay_us(60);//cho 60us
01F5:  MOVLW  63
01F6:  MOVWF  77
01F7:  DECFSZ 77,F
01F8:  GOTO   1F7
01F9:  GOTO   1FA
....................    if(!DHT_DATA_IN)return DHT_ER;
01FA:  BTFSC  07.0
01FB:  GOTO   200
01FC:  MOVLW  00
01FD:  MOVWF  78
01FE:  GOTO   243
01FF:  GOTO   202
....................    else while((DHT_DATA_IN));    //Doi Data ve 0
0200:  BTFSC  07.0
0201:  GOTO   200
....................    //Bat dau doc du lieu
....................    for(i=0;i<5;i++)
0202:  CLRF   31
0203:  MOVF   31,W
0204:  SUBLW  04
0205:  BTFSS  03.0
0206:  GOTO   22D
....................    {
....................       for(ii=0;ii<8;ii++)
0207:  CLRF   30
0208:  MOVF   30,W
0209:  SUBLW  07
020A:  BTFSS  03.0
020B:  GOTO   22B
....................       {   
....................          while((!DHT_DATA_IN));//Doi Data len 1
020C:  BTFSS  07.0
020D:  GOTO   20C
....................          delay_us(50);
020E:  MOVLW  53
020F:  MOVWF  77
0210:  DECFSZ 77,F
0211:  GOTO   210
....................          if(DHT_DATA_IN)
0212:  BTFSS  07.0
0213:  GOTO   229
....................          {
....................             buffer[i]|=(1<<(7-ii));
0214:  MOVLW  2B
0215:  ADDWF  31,W
0216:  MOVWF  04
0217:  BCF    03.7
0218:  MOVF   30,W
0219:  SUBLW  07
021A:  MOVWF  78
021B:  MOVLW  01
021C:  MOVWF  77
021D:  MOVF   78,F
021E:  BTFSC  03.2
021F:  GOTO   224
0220:  BCF    03.0
0221:  RLF    77,F
0222:  DECFSZ 78,F
0223:  GOTO   220
0224:  MOVF   77,W
0225:  IORWF  00,W
0226:  MOVWF  00
....................             while((DHT_DATA_IN));//Doi Data xuong 0
0227:  BTFSC  07.0
0228:  GOTO   227
....................          }
0229:  INCF   30,F
022A:  GOTO   208
....................       }
022B:  INCF   31,F
022C:  GOTO   203
....................    }
....................    checksum=buffer[0]+buffer[1]+buffer[2]+buffer[3];
022D:  MOVF   2C,W
022E:  ADDWF  2B,W
022F:  ADDWF  2D,W
0230:  ADDWF  2E,W
0231:  MOVWF  32
....................    if((checksum)!=buffer[4])return DHT_ER;
0232:  MOVF   2F,W
0233:  SUBWF  32,W
0234:  BTFSC  03.2
0235:  GOTO   239
0236:  MOVLW  00
0237:  MOVWF  78
0238:  GOTO   243
....................    tem1  =   buffer[2];//gia tri phan nguyen
0239:  MOVF   2D,W
023A:  MOVWF  20
....................    tem2  =   buffer[3];//gia tri phan thap phan
023B:  MOVF   2E,W
023C:  MOVWF  21
....................    humi1 =   buffer[0];//gia tri phan nguyen
023D:  MOVF   2B,W
023E:  MOVWF  22
....................    humi2 =   buffer[1];//gia tri phan thap phan
023F:  MOVF   2C,W
0240:  MOVWF  23
....................    return DHT_OK;
0241:  MOVLW  01
0242:  MOVWF  78
.................... }
.................... 
.................... void phim_up()
.................... {
....................    if(input(up)==0)
*
0299:  BSF    03.5
029A:  BSF    09.0
029B:  BCF    03.5
029C:  BTFSC  09.0
029D:  GOTO   2C3
....................    {
....................       delay_ms(20);
029E:  MOVLW  14
029F:  MOVWF  3B
02A0:  CALL   012
....................       if (input(up)==0)
02A1:  BSF    03.5
02A2:  BSF    09.0
02A3:  BCF    03.5
02A4:  BTFSC  09.0
02A5:  GOTO   2C3
....................       {
....................          gh++;
02A6:  MOVLW  01
02A7:  ADDWF  24,F
02A8:  BTFSC  03.0
02A9:  INCF   25,F
02AA:  BTFSC  03.2
02AB:  INCF   26,F
02AC:  BTFSC  03.2
02AD:  INCF   27,F
....................          if(gh>50)          gh=50;
02AE:  MOVF   27,F
02AF:  BTFSS  03.2
02B0:  GOTO   2BB
02B1:  MOVF   26,F
02B2:  BTFSS  03.2
02B3:  GOTO   2BB
02B4:  MOVF   25,F
02B5:  BTFSS  03.2
02B6:  GOTO   2BB
02B7:  MOVF   24,W
02B8:  SUBLW  32
02B9:  BTFSC  03.0
02BA:  GOTO   2C0
02BB:  CLRF   27
02BC:  CLRF   26
02BD:  CLRF   25
02BE:  MOVLW  32
02BF:  MOVWF  24
....................          delay_ms(200);
02C0:  MOVLW  C8
02C1:  MOVWF  3B
02C2:  CALL   012
....................      }
....................    }
02C3:  BCF    0A.3
02C4:  BCF    0A.4
02C5:  GOTO   35F (RETURN)
.................... }
....................  
.................... 
.................... void phim_dw()
.................... {
....................    if(input(dw)==0)
02C6:  BSF    03.5
02C7:  BSF    09.1
02C8:  BCF    03.5
02C9:  BTFSC  09.1
02CA:  GOTO   2F0
....................    {
....................       delay_ms(20);
02CB:  MOVLW  14
02CC:  MOVWF  3B
02CD:  CALL   012
....................       if (input(dw)==0)
02CE:  BSF    03.5
02CF:  BSF    09.1
02D0:  BCF    03.5
02D1:  BTFSC  09.1
02D2:  GOTO   2F0
....................       {
....................          gh--;
02D3:  MOVLW  FF
02D4:  ADDWF  24,F
02D5:  BTFSS  03.0
02D6:  ADDWF  25,F
02D7:  BTFSS  03.0
02D8:  ADDWF  26,F
02D9:  BTFSS  03.0
02DA:  ADDWF  27,F
....................          if(gh<5)          gh=5;
02DB:  MOVF   27,F
02DC:  BTFSS  03.2
02DD:  GOTO   2ED
02DE:  MOVF   26,F
02DF:  BTFSS  03.2
02E0:  GOTO   2ED
02E1:  MOVF   25,F
02E2:  BTFSS  03.2
02E3:  GOTO   2ED
02E4:  MOVF   24,W
02E5:  SUBLW  04
02E6:  BTFSS  03.0
02E7:  GOTO   2ED
02E8:  CLRF   27
02E9:  CLRF   26
02EA:  CLRF   25
02EB:  MOVLW  05
02EC:  MOVWF  24
....................          delay_ms(200);
02ED:  MOVLW  C8
02EE:  MOVWF  3B
02EF:  CALL   012
....................      }
....................    }
02F0:  BCF    0A.3
02F1:  BCF    0A.4
02F2:  GOTO   360 (RETURN)
.................... }
.................... 
.................... void doc_dht()       // ham hien thi trong 1 giay lam bao nhieu lan
.................... {
....................    if(DHT_GetTemHumi(nd,nd1,da,da1))            // dht11
*
0243:  MOVF   78,F
0244:  BTFSC  03.2
0245:  GOTO   296
....................    {
....................       lcd_gotoxy(1,1);
0246:  MOVLW  01
0247:  MOVWF  34
0248:  MOVWF  35
0249:  CALL   129
....................       lcd_putc("ND:");
024A:  MOVLW  04
024B:  BSF    03.6
024C:  MOVWF  0D
024D:  MOVLW  00
024E:  MOVWF  0F
024F:  BCF    03.6
0250:  CALL   167
....................       lcd_putc(nd/10+0x30);
0251:  MOVF   20,W
0252:  MOVWF  2B
0253:  MOVLW  0A
0254:  MOVWF  2C
0255:  CALL   1BD
0256:  MOVLW  30
0257:  ADDWF  78,W
0258:  MOVWF  2B
0259:  MOVWF  33
025A:  CALL   13B
....................       lcd_putc(nd%10+0x30);
025B:  MOVF   20,W
025C:  MOVWF  2B
025D:  MOVLW  0A
025E:  MOVWF  2C
025F:  CALL   1BD
0260:  MOVLW  30
0261:  ADDWF  77,W
0262:  MOVWF  2B
0263:  MOVWF  33
0264:  CALL   13B
....................       lcd_putc(0xdf);
0265:  MOVLW  DF
0266:  MOVWF  33
0267:  CALL   13B
....................       lcd_putc("C ");
0268:  MOVLW  06
0269:  BSF    03.6
026A:  MOVWF  0D
026B:  MOVLW  00
026C:  MOVWF  0F
026D:  BCF    03.6
026E:  CALL   167
....................       
....................       lcd_gotoxy(11,1);
026F:  MOVLW  0B
0270:  MOVWF  34
0271:  MOVLW  01
0272:  MOVWF  35
0273:  CALL   129
....................       lcd_putc("DA:");
0274:  MOVLW  08
0275:  BSF    03.6
0276:  MOVWF  0D
0277:  MOVLW  00
0278:  MOVWF  0F
0279:  BCF    03.6
027A:  CALL   167
....................       lcd_putc(da/10+0x30);
027B:  MOVF   22,W
027C:  MOVWF  2B
027D:  MOVLW  0A
027E:  MOVWF  2C
027F:  CALL   1BD
0280:  MOVLW  30
0281:  ADDWF  78,W
0282:  MOVWF  2B
0283:  MOVWF  33
0284:  CALL   13B
....................       lcd_putc(da%10+0x30);
0285:  MOVF   22,W
0286:  MOVWF  2B
0287:  MOVLW  0A
0288:  MOVWF  2C
0289:  CALL   1BD
028A:  MOVLW  30
028B:  ADDWF  77,W
028C:  MOVWF  2B
028D:  MOVWF  33
028E:  CALL   13B
....................       lcd_putc("%");
028F:  MOVLW  0A
0290:  BSF    03.6
0291:  MOVWF  0D
0292:  MOVLW  00
0293:  MOVWF  0F
0294:  BCF    03.6
0295:  CALL   167
....................    }       
0296:  BCF    0A.3
0297:  BCF    0A.4
0298:  GOTO   35E (RETURN)
.................... }
.................... 
.................... void main()
*
0342:  MOVF   03,W
0343:  ANDLW  1F
0344:  MOVWF  03
0345:  CLRF   29
0346:  CLRF   28
0347:  MOVLW  FF
0348:  MOVWF  2A
0349:  BSF    03.5
034A:  BSF    1F.0
034B:  BSF    1F.1
034C:  BSF    1F.2
034D:  BCF    1F.3
034E:  MOVLW  07
034F:  MOVWF  1C
0350:  BCF    03.7
.................... {
....................    set_tris_e(0xff);
0351:  BSF    09.0
0352:  BSF    09.1
0353:  BSF    09.2
....................    set_tris_a(0xff);
0354:  MOVLW  FF
0355:  MOVWF  05
....................    
....................    lcd_init();
0356:  BCF    03.5
0357:  GOTO   0E3
....................    gh=35;
0358:  CLRF   27
0359:  CLRF   26
035A:  CLRF   25
035B:  MOVLW  23
035C:  MOVWF  24
....................    while(true)
....................    {
....................       doc_dht();
035D:  GOTO   1D2
....................       phim_up();
035E:  GOTO   299
....................       phim_dw();
035F:  GOTO   2C6
....................       lcd_gotoxy(1,2);
0360:  MOVLW  01
0361:  MOVWF  34
0362:  MOVLW  02
0363:  MOVWF  35
0364:  CALL   129
....................       lcd_putc("GIOI HAN:");
0365:  MOVLW  0B
0366:  BSF    03.6
0367:  MOVWF  0D
0368:  MOVLW  00
0369:  MOVWF  0F
036A:  BCF    03.6
036B:  CALL   167
....................       lcd_putc(gh/10+0x30);
036C:  BCF    03.1
036D:  MOVF   27,W
036E:  MOVWF  32
036F:  MOVF   26,W
0370:  MOVWF  31
0371:  MOVF   25,W
0372:  MOVWF  30
0373:  MOVF   24,W
0374:  MOVWF  2F
0375:  CLRF   36
0376:  CLRF   35
0377:  CLRF   34
0378:  MOVLW  0A
0379:  MOVWF  33
037A:  CALL   2F3
037B:  MOVF   7A,W
037C:  MOVWF  2E
037D:  MOVF   79,W
037E:  MOVWF  2D
037F:  MOVF   78,W
0380:  MOVWF  2C
0381:  MOVF   77,W
0382:  MOVWF  2B
0383:  MOVLW  30
0384:  ADDWF  2B,F
0385:  MOVLW  00
0386:  BTFSC  03.0
0387:  MOVLW  01
0388:  ADDWF  2C,F
0389:  MOVLW  00
038A:  BTFSC  03.0
038B:  MOVLW  01
038C:  ADDWF  2D,F
038D:  MOVLW  00
038E:  BTFSC  03.0
038F:  MOVLW  01
0390:  ADDWF  2E,F
0391:  MOVF   2B,W
0392:  MOVWF  33
0393:  CALL   13B
....................       lcd_putc(gh%10+0x30);
0394:  BSF    03.1
0395:  MOVLW  2B
0396:  MOVWF  04
0397:  BCF    03.7
0398:  MOVF   27,W
0399:  MOVWF  32
039A:  MOVF   26,W
039B:  MOVWF  31
039C:  MOVF   25,W
039D:  MOVWF  30
039E:  MOVF   24,W
039F:  MOVWF  2F
03A0:  CLRF   36
03A1:  CLRF   35
03A2:  CLRF   34
03A3:  MOVLW  0A
03A4:  MOVWF  33
03A5:  CALL   2F3
03A6:  MOVF   2E,W
03A7:  MOVWF  32
03A8:  MOVF   2D,W
03A9:  MOVWF  31
03AA:  MOVF   2C,W
03AB:  MOVWF  30
03AC:  MOVF   2B,W
03AD:  MOVWF  2F
03AE:  MOVLW  30
03AF:  ADDWF  2F,F
03B0:  MOVLW  00
03B1:  BTFSC  03.0
03B2:  MOVLW  01
03B3:  ADDWF  30,F
03B4:  MOVLW  00
03B5:  BTFSC  03.0
03B6:  MOVLW  01
03B7:  ADDWF  31,F
03B8:  MOVLW  00
03B9:  BTFSC  03.0
03BA:  MOVLW  01
03BB:  ADDWF  32,F
03BC:  MOVF   2F,W
03BD:  MOVWF  33
03BE:  CALL   13B
....................       lcd_putc(0xdf);
03BF:  MOVLW  DF
03C0:  MOVWF  33
03C1:  CALL   13B
....................       lcd_putc("C ");
03C2:  MOVLW  10
03C3:  BSF    03.6
03C4:  MOVWF  0D
03C5:  MOVLW  00
03C6:  MOVWF  0F
03C7:  BCF    03.6
03C8:  CALL   167
....................       
....................       if(nd<gh)
03C9:  MOVF   27,F
03CA:  BTFSS  03.2
03CB:  GOTO   3D6
03CC:  MOVF   26,F
03CD:  BTFSS  03.2
03CE:  GOTO   3D6
03CF:  MOVF   25,F
03D0:  BTFSS  03.2
03D1:  GOTO   3D6
03D2:  MOVF   24,W
03D3:  SUBWF  20,W
03D4:  BTFSC  03.0
03D5:  GOTO   3E7
....................       {
....................          output_high(lx);
03D6:  BCF    2A.1
03D7:  MOVF   2A,W
03D8:  BSF    03.5
03D9:  MOVWF  07
03DA:  BCF    03.5
03DB:  BSF    07.1
....................          output_low(ld);
03DC:  BCF    2A.2
03DD:  MOVF   2A,W
03DE:  BSF    03.5
03DF:  MOVWF  07
03E0:  BCF    03.5
03E1:  BCF    07.2
....................          output_low(loa);
03E2:  BSF    03.5
03E3:  BCF    08.2
03E4:  BCF    03.5
03E5:  BCF    08.2
....................       }
03E6:  GOTO   3F7
....................       else
....................       {
....................          output_high(ld);
03E7:  BCF    2A.2
03E8:  MOVF   2A,W
03E9:  BSF    03.5
03EA:  MOVWF  07
03EB:  BCF    03.5
03EC:  BSF    07.2
....................          output_high(loa);
03ED:  BSF    03.5
03EE:  BCF    08.2
03EF:  BCF    03.5
03F0:  BSF    08.2
....................          output_low(lx);
03F1:  BCF    2A.1
03F2:  MOVF   2A,W
03F3:  BSF    03.5
03F4:  MOVWF  07
03F5:  BCF    03.5
03F6:  BCF    07.1
....................       }
....................       delay_ms(100);
03F7:  MOVLW  64
03F8:  MOVWF  3B
03F9:  CALL   012
03FA:  GOTO   35D
....................    }
.................... }
.................... 
03FB:  SLEEP
.................... 

Configuration Fuses:
   Word  1: 3F72   HS NOWDT PUT BROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
